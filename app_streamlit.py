# -*- coding: utf-8 -*-
"""app_streamlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jlIzYZNtyDv5ENsshzJdjaXA9Erih7W-
"""

# app_streamlit.py
# Interface Streamlit para classificar TROU/DOUBLON usando o ccf_core.py

import streamlit as st
import pandas as pd
from io import BytesIO
from ccf_core_app import long_to_wide_with_pack, classify_ccf

st.set_page_config(page_title="Classificador CCF", page_icon="üîç", layout="wide")

st.title("üîç Classificador CCF ‚Äì An√°lise de TROU e DOUBLON")

st.markdown("""
Esta ferramenta compara as **combina√ß√µes do CCF** com a **tabela mestre de vers√µes**
e identifica se cada combina√ß√£o representa um **TROU/DOUBLON verdadeiro ou falso**.
""")

# === UPLOAD ===
st.sidebar.header("üìÇ Upload de Arquivos")
uploaded_master = st.sidebar.file_uploader("Tabela de Vers√µes (Master)", type=["xlsx"])
uploaded_ccf = st.sidebar.file_uploader("Tabela CCF", type=["xlsx"])

if uploaded_master and uploaded_ccf:
    with st.spinner("üîÑ Carregando e processando os arquivos..."):
        try:
            # Carregar arquivos
            df_master = pd.read_excel(uploaded_master, dtype=str)
            df_ccf = pd.read_excel(uploaded_ccf, dtype=str)

            st.success("‚úÖ Arquivos carregados com sucesso!")
            st.write(f"**Master:** {df_master.shape[0]} linhas √ó {df_master.shape[1]} colunas")
            st.write(f"**CCF:** {df_ccf.shape[0]} linhas √ó {df_ccf.shape[1]} colunas")

            # === Converter master para formato wide ===
            df_wide = long_to_wide_with_pack(
                df_master,
                version_col="Version",
                pack_col="Pack",
                attribut_col="Attribut",
                version_pack_fmt="{version} + {pack}"
            )

            st.info(f"Tabela Master convertida para formato WIDE ({df_wide.shape[1]-1} atributos detectados).")

            # === Rodar classifica√ß√£o ===
            out_df = classify_ccf(df_ccf, df_wide)

            st.subheader("üìä Resultado da Classifica√ß√£o")
            st.dataframe(out_df.head(30), use_container_width=True)

            # === Download do resultado ===
            buffer = BytesIO()
            out_df.to_excel(buffer, index=False)
            buffer.seek(0)

            st.download_button(
                label="‚¨áÔ∏è Baixar Resultado em Excel",
                data=buffer,
                file_name="resultado_classificacao.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

            st.success("‚úÖ Classifica√ß√£o conclu√≠da!")

        except Exception as e:
            st.error(f"‚ùå Ocorreu um erro durante o processamento: {e}")

else:
    st.info("Envie os dois arquivos (Tabela Master e Tabela CCF) para iniciar a an√°lise.")
